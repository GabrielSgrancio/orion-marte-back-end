import { Request, Response } from 'express';
import { validateEmailAndPassword } from '../middlewares/validationMiddleware';
import { userRepository } from '../repositories/userRepository';
import BcryptUtils from '../library/bcryptUtils';
export class LoginController {
  /**
   * @swagger
   * components:
   *   schemas:
   *     User:
   *       type: object
   *       properties:
   *         id:
   *           type: integer
   *           format: int64
   *           description: Autogenerated ID
   *         email:
   *           type: string
   *           description: Unique email
   *         password:
   *           type: string
   *           description: Strong password (8 chars, min 1 uppercase, lowercase, number, special char)
   *       required:
   *         - email
   *         - password
   *       example:
   *         id: 1
   *         email: teste@teste.com
   *         password: RioDeJan!23
   */

  /**
   * @swagger
   * /v1/login:
   *   post:
   *     summary: Route used for users to attempt authentication in the app. The function
   *       is set as static to allow calling it directly from the class, without the need to
   *       instantiate the class. This was used in the file /api/v1/loginRoute.ts
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             type: object
   *             properties:
   *               email:
   *                 type: string
   *               password:
   *                 type: string
   *     responses:
   *       200:
   *         description: Login successful
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 user:
   *                   type: object
   *                   properties:
   *                     id:
   *                       type: string
   *                     name:
   *                       type: string
   *                     email:
   *                       type: string
   *                 token:
   *                   type: string
   *       400:
   *         description: Invalid email and/or password
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 message:
   *                   type: string
   */
  public static async login(req: Request, res: Response): Promise<Response> {
    const { email, password } = req.body;

    const user = await userRepository.findOneBy({ email });

    const encryptedPassword = await BcryptUtils.hashPassword(password)

    if (!user) {
      return res.status(400).send('E-mail e/ou senha inválidos');
    }

    if (validateEmailAndPassword(email, password)) {
      return res.status(400).json({ message: 'E-mail e/ou senha inválidos' });
    }

    if (!BcryptUtils.comparePassword(password, encryptedPassword)) {
      return res.status(400).send('E-mail e/ou senha inválidos');
    }

    user.accessToken = await BcryptUtils.generateJWTToken({ id: user.id }, '5h');
    await userRepository.save(user);

    const { password: _, ...userLogin } = user;

    return res.json({
      user: userLogin,
      token: user.accessToken
    });
  }
}
